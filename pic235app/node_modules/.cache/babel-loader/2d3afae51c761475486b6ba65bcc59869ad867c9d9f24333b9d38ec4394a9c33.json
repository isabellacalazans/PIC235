{"ast":null,"code":"import axios, { AxiosRequestConfig } from \"axios\";\nimport config from \"./../../config.json\";\nexport const RequestType = {\n  GET: \"get\",\n  // eslint-disable-line no-unused-vars\n  POST: \"post\",\n  // eslint-disable-line no-unused-vars\n  PUT: \"PUT\",\n  // eslint-disable-line no-unused-vars\n  PATCH: \"PATCH\",\n  // eslint-disable-line no-unused-vars\n  DELETE: \"DELETE\" // eslint-disable-line no-unused-vars\n};\n\nexport const ResponseType = {\n  Normal: \"Normal\",\n  // eslint-disable-line no-unused-vars\n  Blob: \"Blob\",\n  // eslint-disable-line no-unused-vars\n  Zip: \"Zip\" // eslint-disable-line no-unused-vars\n};\n\nexport class BaseService {\n  // Name of the controller used in this service\n\n  constructor(controller) {\n    this.controller = controller;\n  }\n\n  // Get the session token\n  GetToken() {\n    let key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"token\";\n    return new Promise((resolve, reject) => {\n      try {\n        if (typeof localStorage !== \"undefined\") resolve(localStorage.getItem(key));\n        return resolve(null);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  // Create a request using an URL\n  async CreateRequestByUrl(requestType, url, data) {\n    let responseType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ResponseType.Normal;\n    const token = await this.GetToken(`@${config.appName}:token`);\n    console.log({\n      requestType\n    });\n    const options = {\n      method: requestType,\n      url: config.apiUrl + url,\n      data: data,\n      headers: {\n        Authorization: \"Bearer \" + token\n      }\n    };\n    if (responseType === ResponseType.Blob) options.responseType = \"blob\";else if (responseType === ResponseType.Zip) options.responseType = \"arraybuffer\";\n    const {\n      data: result\n    } = await axios(options);\n    return result;\n  }\n  async CreateRequest(requestType, route, data) {\n    let responseType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ResponseType.Normal;\n    return new Promise((resolve, reject) => {\n      let url = `/${this.controller}`;\n      if (route && route !== \"\") url = `${url}/${route}`;\n      this.CreateRequestByUrl(requestType, url, data, responseType).then(resolve, error => {\n        const e = error;\n        const initialError = e.response ? e.response.data : e;\n        const finalError = initialError.message ? initialError.message : initialError;\n        reject(finalError);\n      });\n    });\n  }\n}","map":{"version":3,"names":["axios","AxiosRequestConfig","config","RequestType","GET","POST","PUT","PATCH","DELETE","ResponseType","Normal","Blob","Zip","BaseService","constructor","controller","GetToken","key","arguments","length","undefined","Promise","resolve","reject","localStorage","getItem","err","CreateRequestByUrl","requestType","url","data","responseType","token","appName","console","log","options","method","apiUrl","headers","Authorization","result","CreateRequest","route","then","error","e","initialError","response","finalError","message"],"sources":["C:/Users/isabe/Desktop/Faculdade/PI8/CÃ³digos/PIC235/pic235app/src/services/ReactService/index.js"],"sourcesContent":["import axios, { AxiosRequestConfig } from \"axios\";\r\n\r\nimport config from \"./../../config.json\";\r\n\r\nexport const RequestType = {\r\n  GET: \"get\",  // eslint-disable-line no-unused-vars\r\n  POST: \"post\", // eslint-disable-line no-unused-vars\r\n  PUT: \"PUT\", // eslint-disable-line no-unused-vars\r\n  PATCH: \"PATCH\", // eslint-disable-line no-unused-vars\r\n  DELETE: \"DELETE\" // eslint-disable-line no-unused-vars\r\n}\r\n\r\nexport const ResponseType = {\r\n  Normal: \"Normal\", // eslint-disable-line no-unused-vars\r\n  Blob: \"Blob\", // eslint-disable-line no-unused-vars\r\n  Zip: \"Zip\" // eslint-disable-line no-unused-vars\r\n}\r\n\r\nexport class BaseService {\r\n  // Name of the controller used in this service\r\n  controller;\r\n\r\n  constructor(controller) {\r\n    this.controller = controller;\r\n  }\r\n\r\n  // Get the session token\r\n  GetToken(key = \"token\") {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        if (typeof localStorage !== \"undefined\") resolve(localStorage.getItem(key));\r\n        return resolve(null);\r\n      } catch (err) {\r\n        reject(err);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Create a request using an URL\r\n  async CreateRequestByUrl(\r\n    requestType,\r\n    url,\r\n    data,// eslint-disable-line\r\n    responseType = ResponseType.Normal\r\n  ) {\r\n    const token = await this.GetToken(`@${config.appName}:token`);\r\n    console.log({ requestType })\r\n    const options = {\r\n      method: requestType,\r\n      url: config.apiUrl + url,\r\n      data: data,\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n      },\r\n    };\r\n\r\n    if (responseType === ResponseType.Blob) options.responseType = \"blob\";\r\n    else if (responseType === ResponseType.Zip) options.responseType = \"arraybuffer\";\r\n\r\n    const { data: result } = await axios(options);\r\n\r\n    return result;\r\n  }\r\n\r\n  async CreateRequest(\r\n    requestType,\r\n    route,\r\n    data,\r\n    responseType = ResponseType.Normal\r\n  ) {\r\n    return new Promise((resolve, reject) => {\r\n      let url = `/${this.controller}`;\r\n\r\n      if (route && route !== \"\") url = `${url}/${route}`;\r\n\r\n      this.CreateRequestByUrl(requestType, url, data, responseType).then(resolve, (error) => {\r\n        const e = error;\r\n        const initialError = e.response ? e.response.data : e;\r\n        const finalError = initialError.message ? initialError.message : initialError;\r\n        reject(finalError);\r\n      });\r\n    });\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}